x = seq(1:100, by =1)
x = seq(1,100, by =1)
df <- data.frame(ind = x)
df
r = 5
df$A <- lapply(x,1-exp(-r)
)
df$A <- lapply(x,1-exp(-r))
df$A <- lapply(x,pexp())
df$Pat <- 1-exp(-r*x)
df
r = .1
df$Pat <- 1-exp(-r*x)
df
plot(df$ind, df$Pat)
df$Min <- 1-exp(-2*r*x)
df
df$Max <- 1-2*exp(-r*x)+exp(-2*r*x)
df
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(df,)
ggplot(df,aes(x= ind, y = Pat )) + geom_line()
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat))
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = blue)
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue', width = 2)
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue', width = 2) + geom_line(aes(y=Min),color = 'red', width = 2)
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat, size = 2),color = 'blue') + geom_line(aes(y=Min, size =2 ),color = 'red') + geom_line(aes(y=Max, size =2 ),color = 'green')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat, size = 1.2),color = 'blue') + geom_line(aes(y=Min, size = 1.2 ),color = 'red') + geom_line(aes(y=Max, size = 1.2 ),color = 'green')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat, size = 1),color = 'blue') + geom_line(aes(y=Min, size = 1.2 ),color = 'red') + geom_line(aes(y=Max, size = 1.2 ),color = 'green')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat, size = 1),color = 'blue') + geom_line(aes(y=Min, size = 1 ),color = 'red') + geom_line(aes(y=Max, size = 1.2 ),color = 'green')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat, size = 1),color = 'blue') + geom_line(aes(y=Min, size = 1 ),color = 'red') + geom_line(aes(y=Max, size = 1),color = 'green')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat, size = 1),color = 'blue') + geom_line(aes(y=Min, size = 1 ),color = 'red') + geom_line(aes(y=Max),color = 'green')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat, size = 1),color = 'blue') + geom_line(aes(y=Min, size = 1 ),color = 'red') + geom_line(aes(y=Max),color = 'green')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') + geom_line(aes(y=Max),color = 'green')
geom_line(aes(y=Max),color = 'green') + xlab('Value') + ylab('Cumulative Probability')
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability")
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + scale_color_discrete()
#jpeg()
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + scale_color_discrete()
#dev.off()
#jpeg()
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + scale_color_discrete() + guides()
#dev.off()
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides()
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides(color=TRUE)
#jpeg()
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides(color=TRUE)
#dev.off()
#jpeg()
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides(color=TRUE) + theme(legend.position="right")
#dev.off()
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides(color=TRUE) + theme(legend.position="right") + scale_colour_manual(values=c("#999999", "#E69F00", "#56B4E9"),
name="Cumulative Distribution Function",
labels=c("Pat", "One Receives", "Both Receive"))
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides(color=TRUE) + theme(legend.position="right")
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides(color=TRUE) + theme(legend.position="right")
#dev.off()
jpeg("~/Desktop/HW2.jpeg")
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides(color=TRUE) + theme(legend.position="right")
dev.off()
dev.off()
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides(color=TRUE) + theme(legend.position="top")
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") + guides(color=TRUE) + theme(legend.position="top") +
scale_colour_manual(name="Random Variable", values=c("r" = "red", "b"="blue", "g"="green"), labels=c("b"="Pat", "r"="Pat OR Robbie", "g"="Pat AND Robbie"))
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat),color = 'blue') + geom_line(aes(y=Min),color = 'red') +
geom_line(aes(y=Max),color = 'green') + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="top") +
scale_colour_manual(name="Random Variable", values=c("r" = "red", "b"="blue", "g"="green"), labels=c("b"="Pat", "r"="Pat OR Robbie", "g"="Pat AND Robbie"))
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat,color = 'blue')) + geom_line(aes(y=Min,color = 'red')) +
geom_line(aes(y=Max,color = 'green')) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat,color = 'Pat')) + geom_line(aes(y=Min,color = 'Pat OR Robbie')) +
geom_line(aes(y=Max,color = 'Pat AND Robbie')) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat,color = 'Pat'),size =.5) + geom_line(aes(y=Min,color = 'Pat OR Robbie')) +
geom_line(aes(y=Max,color = 'Pat AND Robbie')) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat,color = 'Pat'),size =2) + geom_line(aes(y=Min,color = 'Pat OR Robbie')) +
geom_line(aes(y=Max,color = 'Pat AND Robbie')) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat,color = 'Pat'),size=1.5) + geom_line(aes(y=Min,color = 'Pat OR Robbie')) +
geom_line(aes(y=Max,color = 'Pat AND Robbie')) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat,color = 'Pat'),size=1.5) + geom_line(aes(y=Min,color = 'Pat OR Robbie'),size = 1.5) +
geom_line(aes(y=Max,color = 'Pat AND Robbie'),size = 1.5) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
jpeg("~/Desktop/HW2.jpeg")
ggplot(df,aes(x= ind)) + geom_line(aes(y=Pat,color = 'Pat'),size=1.5) + geom_line(aes(y=Min,color = 'Pat OR Robbie'),size = 1.5) +
geom_line(aes(y=Max,color = 'Pat AND Robbie'),size = 1.5) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
dev.off()
8*12
8*12-12
z = seq(1,11, by =.5)
df2 <- data.frame(Time = z)
df2
df2$val <- (10/96)z
df2$val <- (10/96)*z
df2
z = seq(1,10, by =.1)
df2 <- data.frame(Time = z)
df2$val <- (10/96)*z
df2
z = seq(1,9.6, by =.1)
df2 <- data.frame(Time = z)
df2$val <- (10/96)*z
df2
ggplot(df2,aes(x= Time)) + geom_line(aes(y=val,color = 'val'),size=1.5) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
library(ggplot2)
ggplot(df2,aes(x= Time)) + geom_line(aes(y=val,color = 'val'),size=1.5) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
jpeg("~/Desktop/HW2_cdf.jpeg")
ggplot(df2,aes(x= Time)) + geom_line(aes(y=val,color = 'val'),size=1.5) + xlab("Index") + ylab("Cumulative Probability") +  theme(legend.position="right")
dev.off()
maxiters=1000
ex1_draw_betas <- function(a) {
# Function draw_betas_diffa but with both parameters equal
ex1_draw_betas_diffa(a,a)
}
ex1_draw_betas_diffa <- function(a1,a2) {
# Samples and illustrates beta random variables.
#
# Args:
#  a1, a2: the beta parameters
#
# Returns:
#  Nothing.
#
# For each press of "enter" samples a beta random variable
# and illustrates it as a distribution over {1,2}.
# Press 'x' when finished making samples.
for(iter in 1:maxiters) {
# beta random variable sample
rho = rbeta(1,a1,a2)
plot(c(rho,1-rho),
type="h",
xlim=c(0,3),
ylim=c(0,1),
ylab="frequencies",
xlab="index",
xaxt='n',
col="red",
lwd=5,
main=bquote("("~rho[1]~","~rho[2]~")~Beta("~.(a1)
~","~.(a2)~")")
)
axis(1,
at=seq(0,3,by=1),
labels=c("","1","2","")
)
# Generate a new draw for each press of "enter"
# Press 'x' when finished
line <- readline()
if(line == "x") return("done")
}
}
ex1_draw_betas(1.4)
library(tree)
install.packages(tree)
install.packages("tree")
library(tree)
install.packages("ISLR")
attach(Carseats)
ls()
Carseats
library(tree)
library(ISLR)
attach(Carseats)
High = ifelse(Sales<=8,"No", "Yes")
df.CS = data.frame(Carseats, High)
// s
# syntax
tree.cs = tree(High~.Sales, Carseats)
tree.cs = tree(High~. Sales, Carseats)
tree.cs = tree(High~. -Sales, Carseats)
df.CS
tree.cs = tree(High~. -Sales, Carseats)
summary(tree.cs)
summary(tree.carseats)
tree.carseats = tree(High~. -Sales, Carseats)
tree.carseats = tree(High~.-Sales, Carseats)
summary(tree.carseats)
library(devtools)
install.packages('devtools')
library(devtools)
install_github("BIMIB-DISCo/TRONCO", ref = 'development')
install_github("BIMIB-DISCo/TRONCO", ref = 'development')
source("https://bioconductor.org/biocLite.R")
biocLite("BiocInstaller")
install_github("BIMIB-DISCo/TRONCO", ref = 'development')
library(devtools)
install.packages('devtools')
install.packages("devtools")
install_github("BIMIB-DISCo/TRONCO", ref = 'development')
library(devtools)
install_github("BIMIB-DISCo/TRONCO", ref = 'development')
install.packages("pmr")
data(leisure.black)
library(pmr)
data(leisure.black)
leisure.black
library(StatRank)
data("Data.Election1")
Data.Election1
data("Data.Test")
Data.Test
type(Data.Election1)
typeof(Data.Election1)
class(leisure.black)
class(Data.Election1)
leisure.black
data("leisure.white")
destat(leisure.black)
leisure.black
leisure.white
library(plyr)
library(ggplot2)
library(viridis)
library(tidyr)
library(data.table)
softmax <- function(vect){
return(exp(vect)/sum(exp(vect)))
}
maxN <- function(x, N=2){
len <- length(x)
if(N>len){
warning('N greater than length(x).  Setting N=length(x)')
N <- length(x)
}
sort(x,partial=len-N+1)[len-N+1]
}
library(TreeSim)
sim.genetree(10,10)
source("https://bioconductor.org/biocLite.R")
biocLite("TRONCO")
library(TRONCO)
acml
aCML
head(aCML)
tronco.capri(aCML)
CAPRI_RESULT <- tronco.capri(aCML)
library(TRONCO)
l <- aCML
l
head(l)
as.genotypes(l)
as.events(l)
a = as.events(l)
a
type(a)
class(a)
as.data.frame(a)
crc_plain
crc maf
crc_maf
library(TRONCO)
aCML
model <- tronco.capri(aCML)
tronco.plot(model)
source("https://bioconductor.org/biocLite.R")
biocLite("TRONCO")
aCML
library(TRONCO)
aCML
vignette(TRONCO)
browseVignettes("TRONCO")
browseVignettes("TRONCO")
data("crc_maf")
crc_maf
library(TRONCO)
crc_maf
crc_gistic
crc_plain
aCML
browseVignettes("TRONCO")
library(TRONCO)
library(TRONCO)
library(TRONCO)
crc_maf
crc_gistic
crc_plain
aCML
browseVignettes("TRONCO")
causal_structures <- tronco.capri(aCML)
tronco.plot(causal_structures)
library(TRONCO)
crc_maf
crc_gistic
crc_plain
aCML
browseVignettes("TRONCO")
causal_structures <- tronco.capri(aCML)
tronco.plot(causal_structures)
rm(list=ls())
rm(list=ls())
library(TRONCO)
crc_maf
crc_gistic
crc_plain
aCML
browseVignettes("TRONCO")
causal_structures <- tronco.capri(aCML)
tronco.plot(causal_structures)
library(TRONCO)
data(test_model)
as.adj.matrix(test_model)
as.adj.matrix(test_model, events=as.events(test_model)[5:15,], type='pf')
as.adj.matrix(test_model, events=as.events(test_model)[5:15,], type='fit')
as.selective.advantage.relations(test_model, events=as.events(test_model)[5:15,], type='pf')
as.selective.advantage.relations(test_model, events=as.events(test_model)[5:15,], type='fit')
as.adj.matrix(test_model, events=as.events(test_model)[5:15,], type='fit')
library(TRONCO)
acmldata <- data("aCML")
acmldata
acmldata <- data(aCML)
acmldata
acmldata <- data(aCML)
acmldata
library(TRONCO)
aCML
model.capri <- tronco.capri(aCML,boot.seed = 12345, nboot = 5)
model.capri
type(model.capri)
class(model.capri)
install.packages('biglasso')
library(biglasso)
setwd("~/Desktop/MachineLearning/Project/MLaCSProject/Code")
x <- read.csv("../Data/AtBats_RegularSeason_2012-2017_update.csv")
library("lme4")
x$K <- (x$descr=="Strikeout")
head(x)
library(lubridate)
x$year <- year(mdy(x$date))
head(x)
x$year <- year(ymy(x$date))
head(x)
x$year <- year(ymd(x$date))
head(x)
df <- read.csv("../Data/AtBats_RegularSeason_2012-2017_update.csv")
library(lubridate)
df$K <- (x$descr=="Strikeout")
df$year <- year(ymd(x$date))
tail(df)
df2012<-df[which(df$year==2012),]
df2013<-df[which(df$year==2013),]
df2014<-df[which(df$year==2014),]
df2015<-df[which(df$year==2015),]
df2016<-df[which(df$year==2016),]
df2017<-df[which(df$year==2017),]
df2012_train <- df2012[1:round(nrow(df2012)*.8),]
df2012_test <- df2012[round(nrow(df2012)*.8):nrow(2012),]
nrow(df2012_train)
round(nrow(df2012)*.8)
nrow(df2012_train)*.8
nrow(df2012)*.8
nrow(df2012)
nrow(df2012)*.8
round(nrow(df2012)*.8)
nrow(df2012)
nrow(df2012)*.8
nrow(df2012_train)
df2012_test <- df2012[round(nrow(df2012)*.8):nrow(df2012),]
df2013_train <- df2013[1:round(nrow(df2013)*.8),]
df2013_test <- df2013[round(nrow(df2013)*.8):nrow(df2013),]
df2014_train <- df2014[1:round(nrow(df2014)*.8),]
df2014_test <- df2014[round(nrow(df2014)*.8):nrow(df2014),]
df2015_train <- df2015[1:round(nrow(df2015)*.8),]
df2015_test <- df2015[round(nrow(df2015)*.8):nrow(df2015),]
df2016_train <- df2016[1:round(nrow(df2016)*.8),]
df2016_test <- df2016[round(nrow(df2016)*.8):nrow(df2016),]
df2017_train <- df2017[1:round(nrow(df2017)*.8),]
df2017_test <- df2017[round(nrow(df2017)*.8):nrow(df2017),]
trained_batters = levels(df2012_train$batter)
trained_pitchers = levels(df2012_train$pitcher)
d <- df2012_test[where(df2012_train$batter %in% trained_batters),]
d <- df2012_test[which(df2012_train$batter %in% trained_batters),]
d
df2012_test <- df2012[round(nrow(df2012)*.8):nrow(df2012),]
df2012_test <- df2012_test[which(df2012_train$batter %in% trained_batters),]
df2012_test <- df2012_test[which(df2012_train$pitcher %in% trained_pitchers),]
df2015_test <- df2015[round(nrow(df2015)*.8):nrow(df2015),]
df2015_test <- df2015_test[which(df2015_train$batter %in% trained_batters),]
df2015_test <- df2015_test[which(df2015_train$pitcher %in% trained_pitchers),]
head(df2015_test)
df2017_test <- df2017[round(nrow(df2017)*.8):nrow(df2017),]
df2017_test <- df2017_test[which(df2017_train$batter %in% trained_batters),]
df2017_test <- df2017_test[which(df2017_train$pitcher %in% trained_pitchers),]
fit2012 <- glmer(K~(1|pitcher)+(1|batter)+(1|stadium),
df2012_train,family=binomial,control = glmerControl(calc.derivs = FALSE))
LogLossBinary(c(1,0,0),c(.5,.75,.25))
LogLossBinary = function(actual, predicted, eps = 1e-15) {
predicted = pmin(pmax(predicted, eps), 1-eps) - (sum(actual * log(predicted)
+ (1 - actual) * log(1 - predicted))) / length(actual)}
LogLossBinary(c(1,0,0),c(.5,.75,.25))
o<-LogLossBinary(c(1,0,0),c(.5,.75,.25))
o
LogLossBinary(1,c(.5))
o<-LogLossBinary(1,c(.5))
o
train_preds<-predict(fit2012,type="response")
train_performance<-cbind(df2012_train$K,train_preds)
train_performance<- as.data.frame(train_performance)
colnames(train_performance)<- c('K','pred_resonse')
head(train_performance)
train_confusion <- table(factor(train_performance$rounded_pred),factor(train_performance$K))/nrow(X_train)
preds <- predict(fit, df2012_test, type="response")
preds <- predict(fit2012, df2012_test, type="response")
preds
